name: Deploy to ECR

on:
  push:
    branches: [master]

jobs:
  build-and-push:
    name: Build and Push Docker Images to ECR
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [16.x]

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Debug AWS Credentials
        run: |
          echo "AWS_ACCESS_KEY_ID: $TF_VAR_AWS_ACCESS_KEY_ID"
          echo "AWS_SECRET_ACCESS_KEY: $TF_VAR_AWS_SECRET_ACCESS_KEY"
          echo "AWS_SESSION_TOKEN: $TF_VAR_AWS_SESSION_TOKEN"
          echo "AWS_REGION: $TF_VAR_AWS_REGION"

      - name: Build and Push Frontend Docker Image
        uses: docker://ghcr.io/kciter/aws-ecr-action:latest
        with:
          access_key_id: ${{ secrets.TF_VAR_AWS_ACCESS_KEY_ID }}
          secret_access_key: ${{ secrets.TF_VAR_AWS_SECRET_ACCESS_KEY }}
          account_id: ${{ secrets.TF_VAR_AWS_ACCOUNT_ID }}
          repo: frontend-repo
          region: us-east-1
          tags: latest${{ github.sha }}
          create_repo: true
          image_scanning_configuration: true
          set_repo_policy: false
          repo_policy_file: repo-policy.json

      - name: Build and Push API Docker Image
        uses: docker://ghcr.io/kciter/aws-ecr-action:latest
        with:
          access_key_id: ${{ secrets.TF_VAR_AWS_ACCESS_KEY_ID }}
          secret_access_key: ${{ secrets.TF_VAR_AWS_SECRET_ACCESS_KEY }}
          account_id: ${{ secrets.TF_VAR_AWS_ACCOUNT_ID }}
          repo: api-repo
          region: us-east-1
          tags: latest${{ github.sha }}
          create_repo: true
          image_scanning_configuration: true
          set_repo_policy: false
          repo_policy_file: repo-policy.json

  deploy:
    name: Deploy to AWS
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [16.x]

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.TF_VAR_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.TF_VAR_AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.TF_VAR_AWS_SECRET_SESSION_TOKEN }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Deploy API image to Amazon ECS
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: api-repo
          IMAGE_TAG: latest ${{ github.sha }}
        run: |
          # Additional steps for deploying API image to ECS go here
            set -e

            export AWS_ACCESS_KEY_ID=${{ secrets.TF_VAR_AWS_ACCESS_KEY_ID }}
            export AWS_SECRET_ACCESS_KEY=${{ secrets.TF_VAR_AWS_SECRET_ACCESS_KEY }}
            export AWS_SESSION_TOKEN=${{ secrets.TF_VAR_AWS_SESSION_TOKEN }}
            export AWS_REGION=us-east-1

            source_path="$1"
            repository_url="$2"
            tag="${3:-latest}"

            region="$(echo "$repository_url" | cut -d. -f4)"
            image_name="$(echo "$repository_url" | cut -d/ -f2)"

            cd "$source_path"

            aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${{ secrets.TF_VAR_AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com
            docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG ./containers/api
            docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Deploy Frontend image to Amazon ECS
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: frontend-repo
          IMAGE_TAG: latest ${{ github.sha }}
        run: |
          # Additional steps for deploying Frontend image to ECS go here
          set -e

          export AWS_ACCESS_KEY_ID=${{ secrets.TF_VAR_AWS_ACCESS_KEY_ID }}
          export AWS_SECRET_ACCESS_KEY=${{ secrets.TF_VAR_AWS_SECRET_ACCESS_KEY }}
          export AWS_SESSION_TOKEN=${{ secrets.TF_VAR_AWS_SESSION_TOKEN }}
          export AWS_REGION=us-east-1

          source_path="$1"
          repository_url="$2"
          tag="${3:-latest}"

          region="$(echo "$repository_url" | cut -d. -f4)"
          image_name="$(echo "$repository_url" | cut -d/ -f2)"

          cd "$source_path"

          aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${{ secrets.TF_VAR_AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com

          aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${{ secrets.TF_VAR_AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG ./containers/frontend
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG